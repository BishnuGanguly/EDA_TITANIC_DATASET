{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f514e1ec",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:39.911045Z",
     "iopub.status.busy": "2024-07-12T19:29:39.910566Z",
     "iopub.status.idle": "2024-07-12T19:29:40.981916Z",
     "shell.execute_reply": "2024-07-12T19:29:40.980606Z"
    },
    "papermill": {
     "duration": 1.097616,
     "end_time": "2024-07-12T19:29:40.984822",
     "exception": false,
     "start_time": "2024-07-12T19:29:39.887206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/copy-of-titanic21/train.csv\n",
      "/kaggle/input/copy-of-titanic21/test.csv\n",
      "/kaggle/input/copy-of-titanic21/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fdf6bb85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:41.027204Z",
     "iopub.status.busy": "2024-07-12T19:29:41.026642Z",
     "iopub.status.idle": "2024-07-12T19:29:42.552291Z",
     "shell.execute_reply": "2024-07-12T19:29:42.551162Z"
    },
    "papermill": {
     "duration": 1.549923,
     "end_time": "2024-07-12T19:29:42.555282",
     "exception": false,
     "start_time": "2024-07-12T19:29:41.005359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from IPython.display import Image, display\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "569f1bef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:42.599369Z",
     "iopub.status.busy": "2024-07-12T19:29:42.598937Z",
     "iopub.status.idle": "2024-07-12T19:29:42.627228Z",
     "shell.execute_reply": "2024-07-12T19:29:42.625972Z"
    },
    "papermill": {
     "duration": 0.053387,
     "end_time": "2024-07-12T19:29:42.630183",
     "exception": false,
     "start_time": "2024-07-12T19:29:42.576796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#load the train dataset\n",
    "train = pd.read_csv('/kaggle/input/copy-of-titanic21/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6a45a6dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:42.672343Z",
     "iopub.status.busy": "2024-07-12T19:29:42.671919Z",
     "iopub.status.idle": "2024-07-12T19:29:42.703473Z",
     "shell.execute_reply": "2024-07-12T19:29:42.702261Z"
    },
    "papermill": {
     "duration": 0.056223,
     "end_time": "2024-07-12T19:29:42.706326",
     "exception": false,
     "start_time": "2024-07-12T19:29:42.650103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(train.head())#inspect the first few rows of the train dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "852b5502",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:42.748908Z",
     "iopub.status.busy": "2024-07-12T19:29:42.748024Z",
     "iopub.status.idle": "2024-07-12T19:29:42.758011Z",
     "shell.execute_reply": "2024-07-12T19:29:42.756825Z"
    },
    "papermill": {
     "duration": 0.03426,
     "end_time": "2024-07-12T19:29:42.760665",
     "exception": false,
     "start_time": "2024-07-12T19:29:42.726405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# set the index to passengerId\n",
    "train = train.set_index('PassengerId')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4895fd5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:42.803140Z",
     "iopub.status.busy": "2024-07-12T19:29:42.802751Z",
     "iopub.status.idle": "2024-07-12T19:29:42.819665Z",
     "shell.execute_reply": "2024-07-12T19:29:42.818401Z"
    },
    "papermill": {
     "duration": 0.041341,
     "end_time": "2024-07-12T19:29:42.822465",
     "exception": false,
     "start_time": "2024-07-12T19:29:42.781124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#load the test dataset\n",
    "test = pd.read_csv('/kaggle/input/copy-of-titanic21/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c4673547",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:42.866282Z",
     "iopub.status.busy": "2024-07-12T19:29:42.865831Z",
     "iopub.status.idle": "2024-07-12T19:29:42.883933Z",
     "shell.execute_reply": "2024-07-12T19:29:42.882683Z"
    },
    "papermill": {
     "duration": 0.043878,
     "end_time": "2024-07-12T19:29:42.886452",
     "exception": false,
     "start_time": "2024-07-12T19:29:42.842574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(test.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e92d076b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:42.930668Z",
     "iopub.status.busy": "2024-07-12T19:29:42.929111Z",
     "iopub.status.idle": "2024-07-12T19:29:42.937565Z",
     "shell.execute_reply": "2024-07-12T19:29:42.936272Z"
    },
    "papermill": {
     "duration": 0.032792,
     "end_time": "2024-07-12T19:29:42.940150",
     "exception": false,
     "start_time": "2024-07-12T19:29:42.907358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 11)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#by calling the shape attribute of the train dataset we can observe that there are 891 observations and 11 columns\n",
    "#in the data set\n",
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "39106d90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:42.984179Z",
     "iopub.status.busy": "2024-07-12T19:29:42.983753Z",
     "iopub.status.idle": "2024-07-12T19:29:43.004990Z",
     "shell.execute_reply": "2024-07-12T19:29:43.003612Z"
    },
    "papermill": {
     "duration": 0.047332,
     "end_time": "2024-07-12T19:29:43.008014",
     "exception": false,
     "start_time": "2024-07-12T19:29:42.960682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Survived  Pclass  \\\n",
       "PassengerId                     \n",
       "1                   0       3   \n",
       "2                   1       1   \n",
       "3                   1       3   \n",
       "4                   1       1   \n",
       "5                   0       3   \n",
       "\n",
       "                                                          Name     Sex   Age  \\\n",
       "PassengerId                                                                    \n",
       "1                                      Braund, Mr. Owen Harris    male  22.0   \n",
       "2            Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0   \n",
       "3                                       Heikkinen, Miss. Laina  female  26.0   \n",
       "4                 Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0   \n",
       "5                                     Allen, Mr. William Henry    male  35.0   \n",
       "\n",
       "             SibSp  Parch            Ticket     Fare Cabin Embarked  \n",
       "PassengerId                                                          \n",
       "1                1      0         A/5 21171   7.2500   NaN        S  \n",
       "2                1      0          PC 17599  71.2833   C85        C  \n",
       "3                0      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "4                1      0            113803  53.1000  C123        S  \n",
       "5                0      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check out the data summary\n",
    "# Age, Cabin and Embarked has missing data\n",
    "train.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "198dd9cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:43.051741Z",
     "iopub.status.busy": "2024-07-12T19:29:43.051352Z",
     "iopub.status.idle": "2024-07-12T19:29:43.064277Z",
     "shell.execute_reply": "2024-07-12T19:29:43.063055Z"
    },
    "papermill": {
     "duration": 0.038041,
     "end_time": "2024-07-12T19:29:43.067075",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.029034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0\n",
       "Survived    int64\n",
       "Pclass      int64\n",
       "Name       object\n",
       "Sex        object\n",
       "Age       float64\n",
       "SibSp       int64\n",
       "Parch       int64\n",
       "Ticket     object\n",
       "Fare      float64\n",
       "Cabin      object\n",
       "Embarked   object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# identify datatypes of the 11 columns, add the stats to the datadict\n",
    "datadict = pd.DataFrame(train.dtypes)\n",
    "datadict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2c3d5c67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:43.111914Z",
     "iopub.status.busy": "2024-07-12T19:29:43.110896Z",
     "iopub.status.idle": "2024-07-12T19:29:43.128635Z",
     "shell.execute_reply": "2024-07-12T19:29:43.127396Z"
    },
    "papermill": {
     "duration": 0.042618,
     "end_time": "2024-07-12T19:29:43.131222",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.088604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>MissingVal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "      <td>687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0  MissingVal\n",
       "Survived    int64           0\n",
       "Pclass      int64           0\n",
       "Name       object           0\n",
       "Sex        object           0\n",
       "Age       float64         177\n",
       "SibSp       int64           0\n",
       "Parch       int64           0\n",
       "Ticket     object           0\n",
       "Fare      float64           0\n",
       "Cabin      object         687\n",
       "Embarked   object           2"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datadict['MissingVal'] = train.isnull().sum()\n",
    "datadict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "59266f5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:43.175964Z",
     "iopub.status.busy": "2024-07-12T19:29:43.175573Z",
     "iopub.status.idle": "2024-07-12T19:29:43.196543Z",
     "shell.execute_reply": "2024-07-12T19:29:43.195343Z"
    },
    "papermill": {
     "duration": 0.046652,
     "end_time": "2024-07-12T19:29:43.199170",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.152518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>MissingVal</th>\n",
       "      <th>NUnique</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "      <td>177</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "      <td>248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "      <td>687</td>\n",
       "      <td>147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0  MissingVal  NUnique\n",
       "Survived    int64           0        2\n",
       "Pclass      int64           0        3\n",
       "Name       object           0      891\n",
       "Sex        object           0        2\n",
       "Age       float64         177       88\n",
       "SibSp       int64           0        7\n",
       "Parch       int64           0        7\n",
       "Ticket     object           0      681\n",
       "Fare      float64           0      248\n",
       "Cabin      object         687      147\n",
       "Embarked   object           2        3"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datadict['NUnique']=train.nunique()\n",
    "datadict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "aafdbd5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:43.244305Z",
     "iopub.status.busy": "2024-07-12T19:29:43.243884Z",
     "iopub.status.idle": "2024-07-12T19:29:43.260193Z",
     "shell.execute_reply": "2024-07-12T19:29:43.258841Z"
    },
    "papermill": {
     "duration": 0.042049,
     "end_time": "2024-07-12T19:29:43.262886",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.220837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>MissingVal</th>\n",
       "      <th>NUnique</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "      <td>177</td>\n",
       "      <td>88</td>\n",
       "      <td>714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>681</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "      <td>248</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "      <td>687</td>\n",
       "      <td>147</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0  MissingVal  NUnique  Count\n",
       "Survived    int64           0        2    891\n",
       "Pclass      int64           0        3    891\n",
       "Name       object           0      891    891\n",
       "Sex        object           0        2    891\n",
       "Age       float64         177       88    714\n",
       "SibSp       int64           0        7    891\n",
       "Parch       int64           0        7    891\n",
       "Ticket     object           0      681    891\n",
       "Fare      float64           0      248    891\n",
       "Cabin      object         687      147    204\n",
       "Embarked   object           2        3    889"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datadict['Count']=train.count()\n",
    "datadict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4d3e9cd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:43.308787Z",
     "iopub.status.busy": "2024-07-12T19:29:43.308353Z",
     "iopub.status.idle": "2024-07-12T19:29:43.323216Z",
     "shell.execute_reply": "2024-07-12T19:29:43.322035Z"
    },
    "papermill": {
     "duration": 0.041108,
     "end_time": "2024-07-12T19:29:43.325970",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.284862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DataType</th>\n",
       "      <th>MissingVal</th>\n",
       "      <th>NUnique</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>float64</td>\n",
       "      <td>177</td>\n",
       "      <td>88</td>\n",
       "      <td>714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>int64</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>object</td>\n",
       "      <td>0</td>\n",
       "      <td>681</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>float64</td>\n",
       "      <td>0</td>\n",
       "      <td>248</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>object</td>\n",
       "      <td>687</td>\n",
       "      <td>147</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         DataType  MissingVal  NUnique  Count\n",
       "Survived    int64           0        2    891\n",
       "Pclass      int64           0        3    891\n",
       "Name       object           0      891    891\n",
       "Sex        object           0        2    891\n",
       "Age       float64         177       88    714\n",
       "SibSp       int64           0        7    891\n",
       "Parch       int64           0        7    891\n",
       "Ticket     object           0      681    891\n",
       "Fare      float64           0      248    891\n",
       "Cabin      object         687      147    204\n",
       "Embarked   object           2        3    889"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datadict=datadict.rename(columns={0:'DataType'})\n",
    "datadict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "43ba61e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:43.372795Z",
     "iopub.status.busy": "2024-07-12T19:29:43.371799Z",
     "iopub.status.idle": "2024-07-12T19:29:43.396015Z",
     "shell.execute_reply": "2024-07-12T19:29:43.394885Z"
    },
    "papermill": {
     "duration": 0.050605,
     "end_time": "2024-07-12T19:29:43.398752",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.348147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>204</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "      <td>681</td>\n",
       "      <td>147</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>347082</td>\n",
       "      <td>B96 B98</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>577</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Name   Sex  Ticket    Cabin Embarked\n",
       "count                       891   891     891      204      889\n",
       "unique                      891     2     681      147        3\n",
       "top     Braund, Mr. Owen Harris  male  347082  B96 B98        S\n",
       "freq                          1   577       7        4      644"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get discripte statistcs on \"object\" datatypes\n",
    "train.describe(include=['object'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "64db7362",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:43.445784Z",
     "iopub.status.busy": "2024-07-12T19:29:43.445382Z",
     "iopub.status.idle": "2024-07-12T19:29:43.468637Z",
     "shell.execute_reply": "2024-07-12T19:29:43.467474Z"
    },
    "papermill": {
     "duration": 0.050088,
     "end_time": "2024-07-12T19:29:43.471300",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.421212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>204</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "      <td>681</td>\n",
       "      <td>147</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>347082</td>\n",
       "      <td>B96 B98</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>577</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Name   Sex  Ticket    Cabin Embarked\n",
       "count                       891   891     891      204      889\n",
       "unique                      891     2     681      147        3\n",
       "top     Braund, Mr. Owen Harris  male  347082  B96 B98        S\n",
       "freq                          1   577       7        4      644"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get discripte statistcs on \"object\" datatypes\n",
    "train.describe(include=['object'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "017d393c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:43.518628Z",
     "iopub.status.busy": "2024-07-12T19:29:43.518192Z",
     "iopub.status.idle": "2024-07-12T19:29:43.549062Z",
     "shell.execute_reply": "2024-07-12T19:29:43.547926Z"
    },
    "papermill": {
     "duration": 0.057773,
     "end_time": "2024-07-12T19:29:43.551750",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.493977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Survived      Pclass         Age       SibSp       Parch        Fare\n",
       "count  891.000000  891.000000  714.000000  891.000000  891.000000  891.000000\n",
       "mean     0.383838    2.308642   29.699118    0.523008    0.381594   32.204208\n",
       "std      0.486592    0.836071   14.526497    1.102743    0.806057   49.693429\n",
       "min      0.000000    1.000000    0.420000    0.000000    0.000000    0.000000\n",
       "25%      0.000000    2.000000   20.125000    0.000000    0.000000    7.910400\n",
       "50%      0.000000    3.000000   28.000000    0.000000    0.000000   14.454200\n",
       "75%      1.000000    3.000000   38.000000    1.000000    0.000000   31.000000\n",
       "max      1.000000    3.000000   80.000000    8.000000    6.000000  512.329200"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get discriptive statistcs on \"number\" datatypes\n",
    "train.describe(include=['number'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6a2fe727",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:43.601103Z",
     "iopub.status.busy": "2024-07-12T19:29:43.600699Z",
     "iopub.status.idle": "2024-07-12T19:29:43.613046Z",
     "shell.execute_reply": "2024-07-12T19:29:43.611657Z"
    },
    "papermill": {
     "duration": 0.039402,
     "end_time": "2024-07-12T19:29:43.615671",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.576269",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived\n",
       "0    0.616162\n",
       "1    0.383838\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.Survived.value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cf70cb1",
   "metadata": {
    "papermill": {
     "duration": 0.022904,
     "end_time": "2024-07-12T19:29:43.661720",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.638816",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Univariate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fd3739a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:43.709999Z",
     "iopub.status.busy": "2024-07-12T19:29:43.709134Z",
     "iopub.status.idle": "2024-07-12T19:29:45.708066Z",
     "shell.execute_reply": "2024-07-12T19:29:45.706688Z"
    },
    "papermill": {
     "duration": 2.028818,
     "end_time": "2024-07-12T19:29:45.713570",
     "exception": false,
     "start_time": "2024-07-12T19:29:43.684752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x1000 with 8 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2, 4, figsize=(16, 10))\n",
    "\n",
    "sns.countplot(x='Survived', data=train, ax=axes[0, 0])\n",
    "sns.countplot(x='Pclass', data=train, ax=axes[0, 1])\n",
    "sns.countplot(x='Sex', data=train, ax=axes[0, 2])\n",
    "sns.countplot(x='SibSp', data=train, ax=axes[0, 3])\n",
    "sns.countplot(x='Parch', data=train, ax=axes[1, 0])\n",
    "sns.countplot(x='Embarked', data=train, ax=axes[1, 1])\n",
    "sns.histplot(train['Fare'], kde=True, ax=axes[1, 2])  # sns.histplot is preferred over sns.distplot\n",
    "sns.histplot(train['Age'].dropna(), kde=True, ax=axes[1, 3])  # sns.histplot is preferred over sns.distplot\n",
    "\n",
    "plt.tight_layout()  # Adjusts the subplots to fit into the figure area\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4f4eccd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:45.772425Z",
     "iopub.status.busy": "2024-07-12T19:29:45.771962Z",
     "iopub.status.idle": "2024-07-12T19:29:47.527035Z",
     "shell.execute_reply": "2024-07-12T19:29:47.525712Z"
    },
    "papermill": {
     "duration": 1.784237,
     "end_time": "2024-07-12T19:29:47.529755",
     "exception": false,
     "start_time": "2024-07-12T19:29:45.745518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x1000 with 8 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "figbi, axesbi = plt.subplots(2, 4, figsize=(16, 10))\n",
    "\n",
    "# Bar plots for categorical variables\n",
    "train.groupby('Pclass')['Survived'].mean().plot(kind='barh', ax=axesbi[0, 0], xlim=[0, 1], color='skyblue')\n",
    "axesbi[0, 0].set_title('Survival Rate by Pclass')\n",
    "axesbi[0, 0].set_xlabel('Survival Rate')\n",
    "axesbi[0, 0].set_ylabel('Pclass')\n",
    "axesbi[0, 0].grid(True)\n",
    "\n",
    "train.groupby('SibSp')['Survived'].mean().plot(kind='barh', ax=axesbi[0, 1], xlim=[0, 1], color='skyblue')\n",
    "axesbi[0, 1].set_title('Survival Rate by SibSp')\n",
    "axesbi[0, 1].set_xlabel('Survival Rate')\n",
    "axesbi[0, 1].set_ylabel('SibSp')\n",
    "axesbi[0, 1].grid(True)\n",
    "\n",
    "train.groupby('Parch')['Survived'].mean().plot(kind='barh', ax=axesbi[0, 2], xlim=[0, 1], color='skyblue')\n",
    "axesbi[0, 2].set_title('Survival Rate by Parch')\n",
    "axesbi[0, 2].set_xlabel('Survival Rate')\n",
    "axesbi[0, 2].set_ylabel('Parch')\n",
    "axesbi[0, 2].grid(True)\n",
    "\n",
    "train.groupby('Sex')['Survived'].mean().plot(kind='barh', ax=axesbi[0, 3], xlim=[0, 1], color='skyblue')\n",
    "axesbi[0, 3].set_title('Survival Rate by Sex')\n",
    "axesbi[0, 3].set_xlabel('Survival Rate')\n",
    "axesbi[0, 3].set_ylabel('Sex')\n",
    "axesbi[0, 3].grid(True)\n",
    "\n",
    "train.groupby('Embarked')['Survived'].mean().plot(kind='barh', ax=axesbi[1, 0], xlim=[0, 1], color='skyblue')\n",
    "axesbi[1, 0].set_title('Survival Rate by Embarked')\n",
    "axesbi[1, 0].set_xlabel('Survival Rate')\n",
    "axesbi[1, 0].set_ylabel('Embarked')\n",
    "axesbi[1, 0].grid(True)\n",
    "\n",
    "# Box plots for numerical variables\n",
    "sns.boxplot(x=\"Survived\", y=\"Age\", data=train, ax=axesbi[1, 1])\n",
    "axesbi[1, 1].set_title('Age Distribution by Survival')\n",
    "axesbi[1, 1].set_xlabel('Survived')\n",
    "axesbi[1, 1].set_ylabel('Age')\n",
    "\n",
    "sns.boxplot(x=\"Survived\", y=\"Fare\", data=train, ax=axesbi[1, 2])\n",
    "axesbi[1, 2].set_title('Fare Distribution by Survival')\n",
    "axesbi[1, 2].set_xlabel('Survived')\n",
    "axesbi[1, 2].set_ylabel('Fare')\n",
    "\n",
    "plt.tight_layout()  # Adjust subplots to fit into figure area.\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "99a3aa04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:47.646660Z",
     "iopub.status.busy": "2024-07-12T19:29:47.646198Z",
     "iopub.status.idle": "2024-07-12T19:29:48.718190Z",
     "shell.execute_reply": "2024-07-12T19:29:48.716924Z"
    },
    "papermill": {
     "duration": 1.102691,
     "end_time": "2024-07-12T19:29:48.720921",
     "exception": false,
     "start_time": "2024-07-12T19:29:47.618230",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.jointplot(x=\"Age\", y=\"Fare\", data=train);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6cff5e12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:48.778094Z",
     "iopub.status.busy": "2024-07-12T19:29:48.777003Z",
     "iopub.status.idle": "2024-07-12T19:29:48.785852Z",
     "shell.execute_reply": "2024-07-12T19:29:48.784670Z"
    },
    "papermill": {
     "duration": 0.040175,
     "end_time": "2024-07-12T19:29:48.788273",
     "exception": false,
     "start_time": "2024-07-12T19:29:48.748098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "#Dropping the collumns of Name , Ticket, Cabin\n",
    "train_multivariate = train.drop(columns=['Name','Ticket','Cabin'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e75c2397",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:48.844117Z",
     "iopub.status.busy": "2024-07-12T19:29:48.843708Z",
     "iopub.status.idle": "2024-07-12T19:29:48.855475Z",
     "shell.execute_reply": "2024-07-12T19:29:48.854133Z"
    },
    "papermill": {
     "duration": 0.043021,
     "end_time": "2024-07-12T19:29:48.858435",
     "exception": false,
     "start_time": "2024-07-12T19:29:48.815414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#one hot encoding\n",
    "train_encoded=pd.get_dummies(train_multivariate,columns=['Sex', 'Embarked'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f84c9f89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:48.915527Z",
     "iopub.status.busy": "2024-07-12T19:29:48.915089Z",
     "iopub.status.idle": "2024-07-12T19:29:49.694001Z",
     "shell.execute_reply": "2024-07-12T19:29:49.692582Z"
    },
    "papermill": {
     "duration": 0.811652,
     "end_time": "2024-07-12T19:29:49.697687",
     "exception": false,
     "start_time": "2024-07-12T19:29:48.886035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the correlation matrix\n",
    "corr = train_encoded.corr()\n",
    "\n",
    "# Create a figure and axes\n",
    "f, ax = plt.subplots(figsize=(10, 8))\n",
    "# Create a heatmap\n",
    "sns.heatmap(corr,\n",
    "            mask=np.zeros_like(corr, dtype=np.bool_), \n",
    "            cmap=sns.diverging_palette(220, 10, as_cmap=True),\n",
    "            square=True, ax=ax, annot=True, linewidths=0.5)\n",
    "\n",
    "# Add title\n",
    "plt.title('Correlation Matrix')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daa0c44d",
   "metadata": {
    "papermill": {
     "duration": 0.029329,
     "end_time": "2024-07-12T19:29:49.756141",
     "exception": false,
     "start_time": "2024-07-12T19:29:49.726812",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    " Feature Engineering Data- Extract title from name, Extract new features from the other features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9bb1ceca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:49.816931Z",
     "iopub.status.busy": "2024-07-12T19:29:49.816481Z",
     "iopub.status.idle": "2024-07-12T19:29:49.824579Z",
     "shell.execute_reply": "2024-07-12T19:29:49.823083Z"
    },
    "papermill": {
     "duration": 0.041804,
     "end_time": "2024-07-12T19:29:49.827343",
     "exception": false,
     "start_time": "2024-07-12T19:29:49.785539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['Name_len'] = train.Name.str.len()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "53169368",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:49.890441Z",
     "iopub.status.busy": "2024-07-12T19:29:49.889934Z",
     "iopub.status.idle": "2024-07-12T19:29:49.897716Z",
     "shell.execute_reply": "2024-07-12T19:29:49.896654Z"
    },
    "papermill": {
     "duration": 0.041359,
     "end_time": "2024-07-12T19:29:49.900281",
     "exception": false,
     "start_time": "2024-07-12T19:29:49.858922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#The first character of the ticket might represent different ticket classes or categories, which could be relevant for analysis.\n",
    "\n",
    "train['Ticket_First'] = train.Ticket.str[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8e5ac7e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:49.960685Z",
     "iopub.status.busy": "2024-07-12T19:29:49.960280Z",
     "iopub.status.idle": "2024-07-12T19:29:49.967408Z",
     "shell.execute_reply": "2024-07-12T19:29:49.966182Z"
    },
    "papermill": {
     "duration": 0.040631,
     "end_time": "2024-07-12T19:29:49.969999",
     "exception": false,
     "start_time": "2024-07-12T19:29:49.929368",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#he size of a passenger's family could influence their chances of survival, as they stay together during an evacuation.\n",
    "train['FamilyCount'] = train.SibSp + train.Parch\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "431f129f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.031405Z",
     "iopub.status.busy": "2024-07-12T19:29:50.030984Z",
     "iopub.status.idle": "2024-07-12T19:29:50.038208Z",
     "shell.execute_reply": "2024-07-12T19:29:50.037071Z"
    },
    "papermill": {
     "duration": 0.040811,
     "end_time": "2024-07-12T19:29:50.040990",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.000179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['Cabin_First'] = train.Cabin.str[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "dcdbe6f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.102062Z",
     "iopub.status.busy": "2024-07-12T19:29:50.101647Z",
     "iopub.status.idle": "2024-07-12T19:29:50.110348Z",
     "shell.execute_reply": "2024-07-12T19:29:50.109120Z"
    },
    "papermill": {
     "duration": 0.042141,
     "end_time": "2024-07-12T19:29:50.112934",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.070793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['title'] = train.Name.str.extract('\\, ([A-Z][^ ]*\\.)', expand=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "bfdb623e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.174388Z",
     "iopub.status.busy": "2024-07-12T19:29:50.173911Z",
     "iopub.status.idle": "2024-07-12T19:29:50.187932Z",
     "shell.execute_reply": "2024-07-12T19:29:50.186666Z"
    },
    "papermill": {
     "duration": 0.047947,
     "end_time": "2024-07-12T19:29:50.190542",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.142595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mr.</td>\n",
       "      <td>517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Miss.</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mrs.</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Master.</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dr.</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Rev.</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Major.</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Mlle.</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Col.</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Don.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Mme.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Ms.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Lady.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Sir.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Capt.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Jonkheer.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        title  count\n",
       "0         Mr.    517\n",
       "1       Miss.    182\n",
       "2        Mrs.    125\n",
       "3     Master.     40\n",
       "4         Dr.      7\n",
       "5        Rev.      6\n",
       "6      Major.      2\n",
       "7       Mlle.      2\n",
       "8        Col.      2\n",
       "9        Don.      1\n",
       "10       Mme.      1\n",
       "11        Ms.      1\n",
       "12      Lady.      1\n",
       "13       Sir.      1\n",
       "14      Capt.      1\n",
       "15  Jonkheer.      1"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.title.value_counts().reset_index()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb37abf6",
   "metadata": {
    "papermill": {
     "duration": 0.029859,
     "end_time": "2024-07-12T19:29:50.249813",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.219954",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    " **Preprocessing and Prepare data for statistical modeling**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b011289f",
   "metadata": {
    "papermill": {
     "duration": 0.03003,
     "end_time": "2024-07-12T19:29:50.309673",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.279643",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "a. Imput Missing or Zero values to the Fare variable\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "752d0384",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.371009Z",
     "iopub.status.busy": "2024-07-12T19:29:50.370595Z",
     "iopub.status.idle": "2024-07-12T19:29:50.377494Z",
     "shell.execute_reply": "2024-07-12T19:29:50.376439Z"
    },
    "papermill": {
     "duration": 0.040735,
     "end_time": "2024-07-12T19:29:50.380262",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.339527",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "# we see that there are 15 Zero values and its reasonbale \n",
    "# to flag them as missing values since every ticket \n",
    "# should have a value greater than 0\n",
    "print((train.Fare == 0).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bd8587ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.444372Z",
     "iopub.status.busy": "2024-07-12T19:29:50.443069Z",
     "iopub.status.idle": "2024-07-12T19:29:50.449241Z",
     "shell.execute_reply": "2024-07-12T19:29:50.448224Z"
    },
    "papermill": {
     "duration": 0.040876,
     "end_time": "2024-07-12T19:29:50.451949",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.411073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# mark zero values as missing or NaN\n",
    "train.Fare = train.Fare.replace(0, np.NaN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bdaaae96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.514408Z",
     "iopub.status.busy": "2024-07-12T19:29:50.513932Z",
     "iopub.status.idle": "2024-07-12T19:29:50.520431Z",
     "shell.execute_reply": "2024-07-12T19:29:50.519278Z"
    },
    "papermill": {
     "duration": 0.041398,
     "end_time": "2024-07-12T19:29:50.523201",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.481803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "# validate to see if there are no more zero values\n",
    "print((train.Fare == 0).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "aab1bc98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.584574Z",
     "iopub.status.busy": "2024-07-12T19:29:50.584117Z",
     "iopub.status.idle": "2024-07-12T19:29:50.593660Z",
     "shell.execute_reply": "2024-07-12T19:29:50.592563Z"
    },
    "papermill": {
     "duration": 0.046342,
     "end_time": "2024-07-12T19:29:50.599309",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.552967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([180, 264, 272, 278, 303, 414, 467, 482, 598, 634, 675, 733, 807, 816,\n",
       "       823],\n",
       "      dtype='int64', name='PassengerId')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train.Fare.isnull()].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0dec212e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.663684Z",
     "iopub.status.busy": "2024-07-12T19:29:50.663239Z",
     "iopub.status.idle": "2024-07-12T19:29:50.671437Z",
     "shell.execute_reply": "2024-07-12T19:29:50.670269Z"
    },
    "papermill": {
     "duration": 0.043303,
     "end_time": "2024-07-12T19:29:50.674172",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.630869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32.75564988584475"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.Fare.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "cd45d7ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.737105Z",
     "iopub.status.busy": "2024-07-12T19:29:50.736658Z",
     "iopub.status.idle": "2024-07-12T19:29:50.744265Z",
     "shell.execute_reply": "2024-07-12T19:29:50.742954Z"
    },
    "papermill": {
     "duration": 0.04284,
     "end_time": "2024-07-12T19:29:50.747362",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.704522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/511734478.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train.Fare.fillna(train.Fare.mean(),inplace=True)\n"
     ]
    }
   ],
   "source": [
    "train.Fare.fillna(train.Fare.mean(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4b175d96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.811480Z",
     "iopub.status.busy": "2024-07-12T19:29:50.811061Z",
     "iopub.status.idle": "2024-07-12T19:29:50.825921Z",
     "shell.execute_reply": "2024-07-12T19:29:50.824747Z"
    },
    "papermill": {
     "duration": 0.050328,
     "end_time": "2024-07-12T19:29:50.828634",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.778306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Name_len</th>\n",
       "      <th>Ticket_First</th>\n",
       "      <th>FamilyCount</th>\n",
       "      <th>Cabin_First</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Survived, Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, Embarked, Name_len, Ticket_First, FamilyCount, Cabin_First, title]\n",
       "Index: []"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# validate if any null values are present after the imputation\n",
    "train[train.Fare.isnull()]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "666e6788",
   "metadata": {
    "papermill": {
     "duration": 0.031121,
     "end_time": "2024-07-12T19:29:50.890931",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.859810",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "b. Imput Missing or Zero values to the Age variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "63a28cce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:50.970769Z",
     "iopub.status.busy": "2024-07-12T19:29:50.970358Z",
     "iopub.status.idle": "2024-07-12T19:29:50.977309Z",
     "shell.execute_reply": "2024-07-12T19:29:50.976031Z"
    },
    "papermill": {
     "duration": 0.049254,
     "end_time": "2024-07-12T19:29:50.980358",
     "exception": false,
     "start_time": "2024-07-12T19:29:50.931104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "177\n"
     ]
    }
   ],
   "source": [
    "print(train.Age.isnull().sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "988eb96d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:51.055585Z",
     "iopub.status.busy": "2024-07-12T19:29:51.055056Z",
     "iopub.status.idle": "2024-07-12T19:29:51.063193Z",
     "shell.execute_reply": "2024-07-12T19:29:51.061790Z"
    },
    "papermill": {
     "duration": 0.04919,
     "end_time": "2024-07-12T19:29:51.066666",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.017476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/2908588107.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train.Age.fillna(train.Age.mean(),inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# impute the missing Age values with the mean Fare value\n",
    "train.Age.fillna(train.Age.mean(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6ed28718",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:51.135938Z",
     "iopub.status.busy": "2024-07-12T19:29:51.135532Z",
     "iopub.status.idle": "2024-07-12T19:29:51.149634Z",
     "shell.execute_reply": "2024-07-12T19:29:51.148282Z"
    },
    "papermill": {
     "duration": 0.049532,
     "end_time": "2024-07-12T19:29:51.152365",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.102833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Name_len</th>\n",
       "      <th>Ticket_First</th>\n",
       "      <th>FamilyCount</th>\n",
       "      <th>Cabin_First</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Survived, Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, Embarked, Name_len, Ticket_First, FamilyCount, Cabin_First, title]\n",
       "Index: []"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# validate if any null values are present after the imputation\n",
    "train[train.Age.isnull()]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "501a8167",
   "metadata": {
    "papermill": {
     "duration": 0.035612,
     "end_time": "2024-07-12T19:29:51.219898",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.184286",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "c. Imput Missing or Zero values to the Cabin variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "86d42e56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:51.286204Z",
     "iopub.status.busy": "2024-07-12T19:29:51.285084Z",
     "iopub.status.idle": "2024-07-12T19:29:51.295021Z",
     "shell.execute_reply": "2024-07-12T19:29:51.293632Z"
    },
    "papermill": {
     "duration": 0.045786,
     "end_time": "2024-07-12T19:29:51.297670",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.251884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7710437710437711"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We see that a majority 77% of the Cabin variable has missing values.\n",
    "# Hence will drop the column from training a machine learnign algorithem\n",
    "train.Cabin.isnull().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "d5d292d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:51.362996Z",
     "iopub.status.busy": "2024-07-12T19:29:51.362619Z",
     "iopub.status.idle": "2024-07-12T19:29:51.385235Z",
     "shell.execute_reply": "2024-07-12T19:29:51.383522Z"
    },
    "papermill": {
     "duration": 0.05905,
     "end_time": "2024-07-12T19:29:51.388640",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.329590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 891 entries, 1 to 891\n",
      "Data columns (total 16 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   Survived      891 non-null    int64  \n",
      " 1   Pclass        891 non-null    int64  \n",
      " 2   Name          891 non-null    object \n",
      " 3   Sex           891 non-null    object \n",
      " 4   Age           891 non-null    float64\n",
      " 5   SibSp         891 non-null    int64  \n",
      " 6   Parch         891 non-null    int64  \n",
      " 7   Ticket        891 non-null    object \n",
      " 8   Fare          891 non-null    float64\n",
      " 9   Cabin         204 non-null    object \n",
      " 10  Embarked      889 non-null    object \n",
      " 11  Name_len      891 non-null    int64  \n",
      " 12  Ticket_First  891 non-null    object \n",
      " 13  FamilyCount   891 non-null    int64  \n",
      " 14  Cabin_First   204 non-null    object \n",
      " 15  title         890 non-null    object \n",
      "dtypes: float64(2), int64(6), object(8)\n",
      "memory usage: 118.3+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f5dff47",
   "metadata": {
    "papermill": {
     "duration": 0.031369,
     "end_time": "2024-07-12T19:29:51.456605",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.425236",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Statistical Modelling**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "78d9bdb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:51.523278Z",
     "iopub.status.busy": "2024-07-12T19:29:51.522775Z",
     "iopub.status.idle": "2024-07-12T19:29:51.531406Z",
     "shell.execute_reply": "2024-07-12T19:29:51.530153Z"
    },
    "papermill": {
     "duration": 0.045492,
     "end_time": "2024-07-12T19:29:51.534143",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.488651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket',\n",
       "       'Fare', 'Cabin', 'Embarked', 'Name_len', 'Ticket_First', 'FamilyCount',\n",
       "       'Cabin_First', 'title'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "beab6fd8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:51.599942Z",
     "iopub.status.busy": "2024-07-12T19:29:51.599444Z",
     "iopub.status.idle": "2024-07-12T19:29:51.608489Z",
     "shell.execute_reply": "2024-07-12T19:29:51.607314Z"
    },
    "papermill": {
     "duration": 0.045208,
     "end_time": "2024-07-12T19:29:51.611049",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.565841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainML = train[['Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket',\n",
    "       'Fare', 'Embarked', 'Name_len', 'Ticket_First', 'FamilyCount',\n",
    "       'title']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c62d627f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:51.677167Z",
     "iopub.status.busy": "2024-07-12T19:29:51.676669Z",
     "iopub.status.idle": "2024-07-12T19:29:51.685972Z",
     "shell.execute_reply": "2024-07-12T19:29:51.684923Z"
    },
    "papermill": {
     "duration": 0.045729,
     "end_time": "2024-07-12T19:29:51.688496",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.642767",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# drop rows of missing values\n",
    "trainML = trainML.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "00655537",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:51.755333Z",
     "iopub.status.busy": "2024-07-12T19:29:51.754911Z",
     "iopub.status.idle": "2024-07-12T19:29:51.765925Z",
     "shell.execute_reply": "2024-07-12T19:29:51.764627Z"
    },
    "papermill": {
     "duration": 0.048936,
     "end_time": "2024-07-12T19:29:51.769100",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.720164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived        0\n",
       "Pclass          0\n",
       "Name            0\n",
       "Sex             0\n",
       "Age             0\n",
       "SibSp           0\n",
       "Parch           0\n",
       "Ticket          0\n",
       "Fare            0\n",
       "Embarked        0\n",
       "Name_len        0\n",
       "Ticket_First    0\n",
       "FamilyCount     0\n",
       "title           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the datafram has any missing values\n",
    "trainML.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3039c867",
   "metadata": {
    "papermill": {
     "duration": 0.032889,
     "end_time": "2024-07-12T19:29:51.837013",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.804124",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**A single predictor model with logistic regression¶**\n",
    "\n",
    "we use logistic regression as the response variable is a binary classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "4137d0a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:51.905314Z",
     "iopub.status.busy": "2024-07-12T19:29:51.904201Z",
     "iopub.status.idle": "2024-07-12T19:29:52.325972Z",
     "shell.execute_reply": "2024-07-12T19:29:52.324812Z"
    },
    "papermill": {
     "duration": 0.459176,
     "end_time": "2024-07-12T19:29:52.328780",
     "exception": false,
     "start_time": "2024-07-12T19:29:51.869604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import Estimator AND Instantiate estimator class to create an estimator object\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "5a318140",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:52.394372Z",
     "iopub.status.busy": "2024-07-12T19:29:52.393929Z",
     "iopub.status.idle": "2024-07-12T19:29:52.401671Z",
     "shell.execute_reply": "2024-07-12T19:29:52.400280Z"
    },
    "papermill": {
     "duration": 0.043831,
     "end_time": "2024-07-12T19:29:52.404656",
     "exception": false,
     "start_time": "2024-07-12T19:29:52.360825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#X_Age and y are numpy arrays\n",
    "X_Age = trainML[['Age']].values\n",
    "y = trainML['Survived'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f5dd110c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:52.469500Z",
     "iopub.status.busy": "2024-07-12T19:29:52.469066Z",
     "iopub.status.idle": "2024-07-12T19:29:52.489695Z",
     "shell.execute_reply": "2024-07-12T19:29:52.488559Z"
    },
    "papermill": {
     "duration": 0.055906,
     "end_time": "2024-07-12T19:29:52.492220",
     "exception": false,
     "start_time": "2024-07-12T19:29:52.436314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use the fit method to train\n",
    "lr.fit(X_Age, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "29554c7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:52.559160Z",
     "iopub.status.busy": "2024-07-12T19:29:52.558101Z",
     "iopub.status.idle": "2024-07-12T19:29:52.566932Z",
     "shell.execute_reply": "2024-07-12T19:29:52.565874Z"
    },
    "papermill": {
     "duration": 0.04529,
     "end_time": "2024-07-12T19:29:52.569508",
     "exception": false,
     "start_time": "2024-07-12T19:29:52.524218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make a prediction\n",
    "y_predict = lr.predict(X_Age)\n",
    "#slicing of arrays\n",
    "y_predict[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "1efacb64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:52.637431Z",
     "iopub.status.busy": "2024-07-12T19:29:52.636645Z",
     "iopub.status.idle": "2024-07-12T19:29:52.646124Z",
     "shell.execute_reply": "2024-07-12T19:29:52.644968Z"
    },
    "papermill": {
     "duration": 0.047178,
     "end_time": "2024-07-12T19:29:52.648639",
     "exception": false,
     "start_time": "2024-07-12T19:29:52.601461",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6182432432432432"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(y == y_predict).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ad0684",
   "metadata": {
    "papermill": {
     "duration": 0.032589,
     "end_time": "2024-07-12T19:29:52.713784",
     "exception": false,
     "start_time": "2024-07-12T19:29:52.681195",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Regression on survival on Fare**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "22391cab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:52.780940Z",
     "iopub.status.busy": "2024-07-12T19:29:52.780421Z",
     "iopub.status.idle": "2024-07-12T19:29:52.798658Z",
     "shell.execute_reply": "2024-07-12T19:29:52.797282Z"
    },
    "papermill": {
     "duration": 0.055643,
     "end_time": "2024-07-12T19:29:52.801755",
     "exception": false,
     "start_time": "2024-07-12T19:29:52.746112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6621621621621622"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_Fare = trainML[['Fare']].values\n",
    "y = trainML['Survived'].values\n",
    "# Use the fit method to train\n",
    "lr.fit(X_Fare,y)\n",
    "# Make a prediction\n",
    "y_predict = lr.predict(X_Fare)\n",
    "y_predict[:10]\n",
    "(y == y_predict).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59e99db1",
   "metadata": {
    "papermill": {
     "duration": 0.032703,
     "end_time": "2024-07-12T19:29:52.867395",
     "exception": false,
     "start_time": "2024-07-12T19:29:52.834692",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Regression on survive on Sex(using a Categorical Variable)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "10395711",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:52.936547Z",
     "iopub.status.busy": "2024-07-12T19:29:52.936045Z",
     "iopub.status.idle": "2024-07-12T19:29:52.954928Z",
     "shell.execute_reply": "2024-07-12T19:29:52.953703Z"
    },
    "papermill": {
     "duration": 0.057064,
     "end_time": "2024-07-12T19:29:52.957903",
     "exception": false,
     "start_time": "2024-07-12T19:29:52.900839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.786036036036036"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_sex = pd.get_dummies(trainML['Sex']).values\n",
    "y = trainML['Survived'].values\n",
    "# Use the fit method to train\n",
    "lr.fit(X_sex, y)\n",
    "# Make a prediction\n",
    "y_predict = lr.predict(X_sex)\n",
    "y_predict[:10]\n",
    "(y == y_predict).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93c234a2",
   "metadata": {
    "papermill": {
     "duration": 0.03235,
     "end_time": "2024-07-12T19:29:53.025094",
     "exception": false,
     "start_time": "2024-07-12T19:29:52.992744",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Regression on survive on PClass(using a Categorical Variable)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "05afc064",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:53.092089Z",
     "iopub.status.busy": "2024-07-12T19:29:53.091709Z",
     "iopub.status.idle": "2024-07-12T19:29:53.109414Z",
     "shell.execute_reply": "2024-07-12T19:29:53.108065Z"
    },
    "papermill": {
     "duration": 0.054721,
     "end_time": "2024-07-12T19:29:53.112342",
     "exception": false,
     "start_time": "2024-07-12T19:29:53.057621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6779279279279279"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pclass = pd.get_dummies(trainML['Pclass']).values\n",
    "y = trainML['Survived'].values\n",
    "lr = LogisticRegression()\n",
    "lr.fit(X_pclass, y)\n",
    "# Make a prediction\n",
    "y_predict = lr.predict(X_pclass)\n",
    "y_predict[:10]\n",
    "(y == y_predict).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02cb22f2",
   "metadata": {
    "papermill": {
     "duration": 0.034467,
     "end_time": "2024-07-12T19:29:53.181004",
     "exception": false,
     "start_time": "2024-07-12T19:29:53.146537",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Predicting Survival based on Random forest model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "6597f55a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:53.249389Z",
     "iopub.status.busy": "2024-07-12T19:29:53.248460Z",
     "iopub.status.idle": "2024-07-12T19:29:53.785579Z",
     "shell.execute_reply": "2024-07-12T19:29:53.784053Z"
    },
    "papermill": {
     "duration": 0.574509,
     "end_time": "2024-07-12T19:29:53.788485",
     "exception": false,
     "start_time": "2024-07-12T19:29:53.213976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 1 1 0 0 0 0 1 1]\n"
     ]
    }
   ],
   "source": [
    "# Importing necessary libraries and classes\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import pandas as pd\n",
    "\n",
    "# Assuming 'trainML' is your training dataset containing features and target variable\n",
    "X = trainML[['Age', 'SibSp', 'Parch', 'Fare', 'Name_len', 'FamilyCount']].values\n",
    "y = trainML['Survived'].values\n",
    "\n",
    "# Instantiate a RandomForestClassifier object\n",
    "RF = RandomForestClassifier()\n",
    "\n",
    "# Train the model using X as features and y as the target variable\n",
    "RF.fit(X, y)\n",
    "\n",
    "# Make predictions on the same dataset X\n",
    "y_predict = RF.predict(X)\n",
    "\n",
    "# Display the first 10 predictions\n",
    "print(y_predict[:10])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "ec4786eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-12T19:29:53.857329Z",
     "iopub.status.busy": "2024-07-12T19:29:53.856899Z",
     "iopub.status.idle": "2024-07-12T19:29:53.865096Z",
     "shell.execute_reply": "2024-07-12T19:29:53.863981Z"
    },
    "papermill": {
     "duration": 0.045822,
     "end_time": "2024-07-12T19:29:53.867722",
     "exception": false,
     "start_time": "2024-07-12T19:29:53.821900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9887387387387387"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(y == y_predict).mean()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 6590071,
     "sourceId": 61131,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 18.093327,
   "end_time": "2024-07-12T19:29:54.726315",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-12T19:29:36.632988",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
